--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_g2a
( 
	data[3..0]	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1216w[3..0]	: WIRE;
	w_anode1233w[3..0]	: WIRE;
	w_anode1243w[3..0]	: WIRE;
	w_anode1253w[3..0]	: WIRE;
	w_anode1263w[3..0]	: WIRE;
	w_anode1273w[3..0]	: WIRE;
	w_anode1283w[3..0]	: WIRE;
	w_anode1293w[3..0]	: WIRE;
	w_anode1303w[3..0]	: WIRE;
	w_anode1314w[3..0]	: WIRE;
	w_anode1324w[3..0]	: WIRE;
	w_anode1334w[3..0]	: WIRE;
	w_anode1344w[3..0]	: WIRE;
	w_anode1354w[3..0]	: WIRE;
	w_anode1364w[3..0]	: WIRE;
	w_anode1374w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[1..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode1293w[3..3], w_anode1283w[3..3], w_anode1273w[3..3], w_anode1263w[3..3], w_anode1253w[3..3], w_anode1243w[3..3], w_anode1233w[3..3], w_anode1216w[3..3]);
	eq_wire2w[] = ( w_anode1374w[3..3], w_anode1364w[3..3], w_anode1354w[3..3], w_anode1344w[3..3], w_anode1334w[3..3], w_anode1324w[3..3], w_anode1314w[3..3], w_anode1303w[3..3]);
	w_anode1216w[] = ( (w_anode1216w[2..2] & (! data_wire[2..2])), (w_anode1216w[1..1] & (! data_wire[1..1])), (w_anode1216w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1233w[] = ( (w_anode1233w[2..2] & (! data_wire[2..2])), (w_anode1233w[1..1] & (! data_wire[1..1])), (w_anode1233w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1243w[] = ( (w_anode1243w[2..2] & (! data_wire[2..2])), (w_anode1243w[1..1] & data_wire[1..1]), (w_anode1243w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1253w[] = ( (w_anode1253w[2..2] & (! data_wire[2..2])), (w_anode1253w[1..1] & data_wire[1..1]), (w_anode1253w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1263w[] = ( (w_anode1263w[2..2] & data_wire[2..2]), (w_anode1263w[1..1] & (! data_wire[1..1])), (w_anode1263w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1273w[] = ( (w_anode1273w[2..2] & data_wire[2..2]), (w_anode1273w[1..1] & (! data_wire[1..1])), (w_anode1273w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1283w[] = ( (w_anode1283w[2..2] & data_wire[2..2]), (w_anode1283w[1..1] & data_wire[1..1]), (w_anode1283w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1293w[] = ( (w_anode1293w[2..2] & data_wire[2..2]), (w_anode1293w[1..1] & data_wire[1..1]), (w_anode1293w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1303w[] = ( (w_anode1303w[2..2] & (! data_wire[2..2])), (w_anode1303w[1..1] & (! data_wire[1..1])), (w_anode1303w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1314w[] = ( (w_anode1314w[2..2] & (! data_wire[2..2])), (w_anode1314w[1..1] & (! data_wire[1..1])), (w_anode1314w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1324w[] = ( (w_anode1324w[2..2] & (! data_wire[2..2])), (w_anode1324w[1..1] & data_wire[1..1]), (w_anode1324w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1334w[] = ( (w_anode1334w[2..2] & (! data_wire[2..2])), (w_anode1334w[1..1] & data_wire[1..1]), (w_anode1334w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1344w[] = ( (w_anode1344w[2..2] & data_wire[2..2]), (w_anode1344w[1..1] & (! data_wire[1..1])), (w_anode1344w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1354w[] = ( (w_anode1354w[2..2] & data_wire[2..2]), (w_anode1354w[1..1] & (! data_wire[1..1])), (w_anode1354w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1364w[] = ( (w_anode1364w[2..2] & data_wire[2..2]), (w_anode1364w[1..1] & data_wire[1..1]), (w_anode1364w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1374w[] = ( (w_anode1374w[2..2] & data_wire[2..2]), (w_anode1374w[1..1] & data_wire[1..1]), (w_anode1374w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
