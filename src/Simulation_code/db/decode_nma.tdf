--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_nma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1025w[1..0]	: WIRE;
	w_anode1034w[3..0]	: WIRE;
	w_anode1051w[3..0]	: WIRE;
	w_anode1061w[3..0]	: WIRE;
	w_anode1071w[3..0]	: WIRE;
	w_anode1081w[3..0]	: WIRE;
	w_anode1091w[3..0]	: WIRE;
	w_anode1101w[3..0]	: WIRE;
	w_anode1111w[3..0]	: WIRE;
	w_anode1123w[1..0]	: WIRE;
	w_anode1130w[3..0]	: WIRE;
	w_anode1141w[3..0]	: WIRE;
	w_anode1151w[3..0]	: WIRE;
	w_anode1161w[3..0]	: WIRE;
	w_anode1171w[3..0]	: WIRE;
	w_anode1181w[3..0]	: WIRE;
	w_anode1191w[3..0]	: WIRE;
	w_anode1201w[3..0]	: WIRE;
	w_data1023w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode1201w[3..3], w_anode1191w[3..3], w_anode1181w[3..3], w_anode1171w[3..3], w_anode1161w[3..3], w_anode1151w[3..3], w_anode1141w[3..3], w_anode1130w[3..3]), ( w_anode1111w[3..3], w_anode1101w[3..3], w_anode1091w[3..3], w_anode1081w[3..3], w_anode1071w[3..3], w_anode1061w[3..3], w_anode1051w[3..3], w_anode1034w[3..3]));
	w_anode1025w[] = ( (w_anode1025w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1034w[] = ( (w_anode1034w[2..2] & (! w_data1023w[2..2])), (w_anode1034w[1..1] & (! w_data1023w[1..1])), (w_anode1034w[0..0] & (! w_data1023w[0..0])), w_anode1025w[1..1]);
	w_anode1051w[] = ( (w_anode1051w[2..2] & (! w_data1023w[2..2])), (w_anode1051w[1..1] & (! w_data1023w[1..1])), (w_anode1051w[0..0] & w_data1023w[0..0]), w_anode1025w[1..1]);
	w_anode1061w[] = ( (w_anode1061w[2..2] & (! w_data1023w[2..2])), (w_anode1061w[1..1] & w_data1023w[1..1]), (w_anode1061w[0..0] & (! w_data1023w[0..0])), w_anode1025w[1..1]);
	w_anode1071w[] = ( (w_anode1071w[2..2] & (! w_data1023w[2..2])), (w_anode1071w[1..1] & w_data1023w[1..1]), (w_anode1071w[0..0] & w_data1023w[0..0]), w_anode1025w[1..1]);
	w_anode1081w[] = ( (w_anode1081w[2..2] & w_data1023w[2..2]), (w_anode1081w[1..1] & (! w_data1023w[1..1])), (w_anode1081w[0..0] & (! w_data1023w[0..0])), w_anode1025w[1..1]);
	w_anode1091w[] = ( (w_anode1091w[2..2] & w_data1023w[2..2]), (w_anode1091w[1..1] & (! w_data1023w[1..1])), (w_anode1091w[0..0] & w_data1023w[0..0]), w_anode1025w[1..1]);
	w_anode1101w[] = ( (w_anode1101w[2..2] & w_data1023w[2..2]), (w_anode1101w[1..1] & w_data1023w[1..1]), (w_anode1101w[0..0] & (! w_data1023w[0..0])), w_anode1025w[1..1]);
	w_anode1111w[] = ( (w_anode1111w[2..2] & w_data1023w[2..2]), (w_anode1111w[1..1] & w_data1023w[1..1]), (w_anode1111w[0..0] & w_data1023w[0..0]), w_anode1025w[1..1]);
	w_anode1123w[] = ( (w_anode1123w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1130w[] = ( (w_anode1130w[2..2] & (! w_data1023w[2..2])), (w_anode1130w[1..1] & (! w_data1023w[1..1])), (w_anode1130w[0..0] & (! w_data1023w[0..0])), w_anode1123w[1..1]);
	w_anode1141w[] = ( (w_anode1141w[2..2] & (! w_data1023w[2..2])), (w_anode1141w[1..1] & (! w_data1023w[1..1])), (w_anode1141w[0..0] & w_data1023w[0..0]), w_anode1123w[1..1]);
	w_anode1151w[] = ( (w_anode1151w[2..2] & (! w_data1023w[2..2])), (w_anode1151w[1..1] & w_data1023w[1..1]), (w_anode1151w[0..0] & (! w_data1023w[0..0])), w_anode1123w[1..1]);
	w_anode1161w[] = ( (w_anode1161w[2..2] & (! w_data1023w[2..2])), (w_anode1161w[1..1] & w_data1023w[1..1]), (w_anode1161w[0..0] & w_data1023w[0..0]), w_anode1123w[1..1]);
	w_anode1171w[] = ( (w_anode1171w[2..2] & w_data1023w[2..2]), (w_anode1171w[1..1] & (! w_data1023w[1..1])), (w_anode1171w[0..0] & (! w_data1023w[0..0])), w_anode1123w[1..1]);
	w_anode1181w[] = ( (w_anode1181w[2..2] & w_data1023w[2..2]), (w_anode1181w[1..1] & (! w_data1023w[1..1])), (w_anode1181w[0..0] & w_data1023w[0..0]), w_anode1123w[1..1]);
	w_anode1191w[] = ( (w_anode1191w[2..2] & w_data1023w[2..2]), (w_anode1191w[1..1] & w_data1023w[1..1]), (w_anode1191w[0..0] & (! w_data1023w[0..0])), w_anode1123w[1..1]);
	w_anode1201w[] = ( (w_anode1201w[2..2] & w_data1023w[2..2]), (w_anode1201w[1..1] & w_data1023w[1..1]), (w_anode1201w[0..0] & w_data1023w[0..0]), w_anode1123w[1..1]);
	w_data1023w[2..0] = data_wire[2..0];
END;
--VALID FILE
